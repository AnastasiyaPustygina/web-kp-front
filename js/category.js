function renderStars(rating) {
    const fullStars = Math.floor(rating);
    const halfStar = rating - fullStars >= 0.5;
    let stars = '';

    for(let i=0; i<fullStars; i++) stars += '‚≠ê';
    if (halfStar) stars += '‚ú∞';
    while (stars.length < 5) stars += '‚òÜ';

    return stars;
}

const params = new URLSearchParams(window.location.search);
const categoryId = params.get('id');
function renderRecipes() {
    const container = document.getElementById('recipes-container');

    fetch(`http://127.0.0.1:5000/recipes/category/${categoryId}?field=count_views`)
        .then(res => {
            if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤');
            return res.json();
        })
        .then(recipes => {
            if (!recipes.length) {
                container.innerHTML = '<p>–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
                return;
            }
            container.innerHTML = '';
            recipes.forEach(recipe => {
                const consumer = JSON.parse(localStorage.getItem("user")) || {};
                const favoriteIds = consumer.favourite_recipe_ids || [];
                let isFavorite = favoriteIds.includes(recipe.id);
                const rating = recipe.rating || 0;

                const card = document.createElement('div');
                card.className = 'recipe-card';

                card.innerHTML = `
    <img src="${recipe.image_url || 'placeholder.jpg'}" alt="${recipe.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" />
    <div class="recipe-info">
      <div class="top-row">
        <h3>${recipe.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
        <button class="like-btn" data-recipe-id="${recipe.id}">${isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}</button>
      </div>
      <div class="recipe-meta">
        <span>–ü–æ—Ä—Ü–∏–∏: ${recipe.count_portion || '‚Äî'}</span>
        <span>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${recipe.count_views || '‚Äî'}</span>
        ${recipe.cooking_time ? `<span>–í—Ä–µ–º—è: ${recipe.cooking_time} –º–∏–Ω</span>` : ''}
        ${rating ? `<span class="recipe-rating">${renderStars(rating)} <small>${rating.toFixed(1)}</small></span>` : ''}
      </div>
      ${recipe.description ? `<p>${recipe.description.substring(0, 60)}...</p>` : ''}
    </div>
  `;

                const favBtn = card.querySelector('.like-btn');
                favBtn.addEventListener('click', async (event) => {
                    event.stopPropagation();
                    event.preventDefault();
                    isFavorite = !isFavorite;
                    favBtn.textContent = isFavorite ? '‚ù§Ô∏è' : 'ü§ç';

                    const method = isFavorite ? 'POST' : 'DELETE';

                    try {
                        const response = await fetch(`http://127.0.0.1:5000/consumers/${consumer.id}/favorites/${recipe.id}`, {
                            method,
                            headers: {'Content-Type': 'application/json'}
                        });

                        const data = await response.json();

                        if (data.success) {
                            consumer.favourite_recipe_ids = data.favourite_recipe_ids;
                            localStorage.setItem('user', JSON.stringify(consumer));
                        } else {
                            alert(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
                    }
                });

                card.addEventListener('click', () => {
                    window.location.href = `recipe.html?id=${recipe.id}`;
                });

                container.appendChild(card);
            });
        })
        .catch(err => {
            console.log(err)
            container.innerHTML = '<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤.</p>';
        });
}
renderRecipes()